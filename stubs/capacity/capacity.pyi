from collections import namedtuple
from typing import Any


_StrCandidate = namedtuple('StrCandidate', ['weight', 'unit', 'str', 'unit_name'])

class Capacity:
    bits: Any = ...
    def __init__(self, bits: Any) -> None: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __abs__(self) -> float: ...
    def __neg__(self) -> float: ...
    def __mul__(self, other: Any) -> "Capacity": ...
    __rmul__: Any = ...
    def __add__(self, other: Any) -> "Capacity": ...
    __radd__: Any = ...
    def __sub__(self, other: Any) -> "Capacity": ...
    def __rsub__(self, other: Any) -> "Capacity": ...
    def __div__(self, other: Any) -> "Capacity": ...
    def __truediv__(self, other: Any) -> "Capacity": ...
    def __floordiv__(self, other: Any) -> "Capacity": ...
    def __rdiv__(self, other: Any) -> "Capacity": ...
    __rtruediv__: Any = ...
    __rfloordiv__: Any = ...
    def __mod__(self, other: Any) -> "Capacity": ...
    def __rmod__(self, other: Any) -> "Capacity": ...
    def roundup(self, boundary: Any) -> "Capacity": ...
    def rounddown(self, boundary: Any) -> "Capacity": ...
    def __format__(self, capacity: Any) -> str: ...


def from_string(s: str) -> Capacity:
    ...


EB: Capacity
EiB: Capacity
GB: Capacity
GiB: Capacity
KB: Capacity
KiB: Capacity
MB: Capacity
MiB: Capacity
PB: Capacity
PiB: Capacity
TB: Capacity
TiB: Capacity
bit: Capacity
byte: Capacity
